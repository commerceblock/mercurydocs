(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{372:function(e,t,a){"use strict";a.r(t);var s=a(42),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"mercury-api-specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mercury-api-specification"}},[e._v("#")]),e._v(" Mercury API specification")]),e._v(" "),a("p",[e._v("The Mercury protocol and wallet operates as a client/server application. The Mercury server is operated by the "),a("em",[e._v("statechain entity")]),e._v(" as a RESTful web service exposing HTTP APIs to enable client wallets to deposit, transfer, withdraw and swap statecoins.")]),e._v(" "),a("h3",{attrs:{id:"rest-framework-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rest-framework-structure"}},[e._v("#")]),e._v(" REST framework structure")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("response = json response object\n\nresponse['error'] : json response error field\n")])])]),a("h2",{attrs:{id:"utility-endpoints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#utility-endpoints"}},[e._v("#")]),e._v(" Utility Endpoints")]),e._v(" "),a("h4",{attrs:{id:"ping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ping"}},[e._v("#")]),e._v(" Ping")]),e._v(" "),a("p",[e._v("Server status")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/ping")]),e._v(" "),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Status::Ok\n")])])]),a("h4",{attrs:{id:"server-fee-info"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server-fee-info"}},[e._v("#")]),e._v(" Server fee info")]),e._v(" "),a("p",[e._v("Provide information on the server fee and locktime requirements")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/info/fee")]),e._v(" "),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("StateEntityFeeInfoAPI {\n    address: String, // Receive address for fee payments\n    deposit: u64,    // basis points\n    withdraw: u64,   // basis points\n    interval: u32,   // locktime decrement interval in blocks\n    initlock: u32,   // inital backup locktime\n}\n")])])]),a("h4",{attrs:{id:"get-statechain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-statechain"}},[e._v("#")]),e._v(" Get statechain")]),e._v(" "),a("p",[e._v("Get the full statechain for a specified statechain ID")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/statechain/<statechain_id>")]),e._v(" "),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("StateChainDataAPI {\n    utxo: OutPoint,\n    amount: u64,\n    chain: Vec<State>,\n    locktime: u32,  // the curent owner nlocktime\n}\n")])])]),a("h4",{attrs:{id:"get-merkle-root"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-merkle-root"}},[e._v("#")]),e._v(" Get Merkle root")]),e._v(" "),a("p",[e._v("Get the current root commitment of the statechain Sparse Merkle Tree")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/info/root")]),e._v(" "),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Root {\n    id: i64,\n    value: Hash,\n    commitment_info: CommitmentInfo,\n}\n")])])]),a("h4",{attrs:{id:"get-merke-proof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-merke-proof"}},[e._v("#")]),e._v(" Get Merke Proof")]),e._v(" "),a("p",[e._v("Get the Merkle path proof for the specified statecoin and Sparse Merkle tree root.")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/info/proof")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SmtProofMsgAPI {\n    root: Root,\n    funding_txid: String,\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Root {\n    id: i64,\n    value: Hash,\n    commitment_info: CommitmentInfo,\n}\n")])])]),a("h4",{attrs:{id:"prepare-sign-transaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prepare-sign-transaction"}},[e._v("#")]),e._v(" Prepare sign transaction")]),e._v(" "),a("p",[e._v("Notify the server of a backup or withdrawal transaction to co-signed (via 2P-ECDSA).")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/prepare-sign")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("PrepareSignTxMsg {\n    shared_key_id: Uuid,\n    protocol: Protocol, // Depsit or Transfer\n    tx_hex: String,\n    input_addrs: Vec<PK>, // pub keys being spent from\n    input_amounts: Vec<u64>,\n    proof_key: String,\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Ok\n")])])]),a("h4",{attrs:{id:"get-recovery-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-recovery-data"}},[e._v("#")]),e._v(" Get recovery data")]),e._v(" "),a("p",[e._v("Request statechain data, IDs and backup transaction for a specified proof key for wallet recovery operations.")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/request-recovery")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("RequestRecoveryData {\n    key: String,\n    sig: String,\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("RecoveryDataMsg {\n    shared_key_id: Uuid,\n    utxo: OutPoint,\n    amount: u64,\n    chain: Vec<State>,\n    locktime: u32,\n    tx_hex: String,\n}\n")])])]),a("h2",{attrs:{id:"_2p-ecdsa-endpoints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2p-ecdsa-endpoints"}},[e._v("#")]),e._v(" 2P ECDSA Endpoints")]),e._v(" "),a("p",[e._v("There are four API calls that are used to handle both shared key generation and then two-party signature generation for the two-party ECDSA protocol. The two key generation API calls are called during the deposit process and on each "),a("code",[e._v("transfer_reciver")]),e._v(". The two signing API calls are called each time a backup transaction needs to be signed, and on withdrawal.")]),e._v(" "),a("h4",{attrs:{id:"shared-key-generation-stage-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shared-key-generation-stage-1"}},[e._v("#")]),e._v(" Shared key generation: stage 1")]),e._v(" "),a("p",[e._v("Request server commitments for key generation and ZK proofs.")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/ecdsa/keygen/first")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("KeyGenMsg1 {\n    shared_key_id: Uuid,\n    protocol: Protocol, // Deposit or Transfer\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("KeyGenFirstMsg {\n    pk_commitment: BigInt,\n    zk_pok_commitment: BigInt,\n}\n")])])]),a("h4",{attrs:{id:"shared-key-generation-stage-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shared-key-generation-stage-2"}},[e._v("#")]),e._v(" Shared key generation: stage 2")]),e._v(" "),a("p",[e._v("Request server Diffie-Hellman shares, Paillier key encryption and ZK proofs.")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/ecdsa/keygen/second")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("KeyGenMsg2 {\n    shared_key_id: Uuid,\n    dlog_proof: DLogProof,\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("KeyGenParty1Message2 {\n    ecdh_second_message: party_one::KeyGenSecondMsg,\n    ek: EncryptionKey,\n    c_key: BigInt,\n    correct_key_proof: NICorrectKeyProof,\n    pdl_statement: PDLwSlackStatement,\n    pdl_proof: PDLwSlackProof,\n    composite_dlog_proof: CompositeDLogProof,\n}\n")])])]),a("h4",{attrs:{id:"_2p-signing-stage-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2p-signing-stage-1"}},[e._v("#")]),e._v(" 2P Signing: stage 1")]),e._v(" "),a("p",[e._v("Request server generation of shared ephemeral signing key and proof.")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/ecdsa/sign/first")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SignMsg1 {\n    shared_key_id: Uuid,\n    eph_key_gen_first_message_party_two: party_two::EphKeyGenFirstMsg,\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("EphKeyGenFirstMsg {\n    d_log_proof: ECDDHProof,\n    public_share: GE,\n    c: GE, //c = secret_share * base_point2\n}\n")])])]),a("h4",{attrs:{id:"_2p-signing-stage-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2p-signing-stage-2"}},[e._v("#")]),e._v(" 2P Signing: stage 2")]),e._v(" "),a("p",[e._v("Request server generation of shared ephemeral signing key and proof.")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/ecdsa/sign/second")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SignMsg2 {\n    shared_key_id: Uuid,\n    sign_second_msg_request: SignSecondMsgRequest {\n    \tprotocol: Protocol,  // Deposit or Transfer\n    \tmessage: BigInt,   // sighash\n    \tparty_two_sign_message: party2::SignMessage,\n\t},\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Vec<Vec<u8>> // signature\n")])])]),a("h2",{attrs:{id:"deposit-endpoints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deposit-endpoints"}},[e._v("#")]),e._v(" Deposit Endpoints")]),e._v(" "),a("p",[e._v("There are two specific deposit endpoints to initiate and finalise the statecoin deposit protocol")]),e._v(" "),a("h4",{attrs:{id:"deposit-initiate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deposit-initiate"}},[e._v("#")]),e._v(" Deposit initiate")]),e._v(" "),a("p",[e._v("Initiate deposit with the client proof key to generate a user ID.")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/deposit/init")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DepositMsg1 {\n    auth: String,\n    proof_key: String,\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Uuid\n")])])]),a("h4",{attrs:{id:"deposit-confirm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deposit-confirm"}},[e._v("#")]),e._v(" Deposit confirm")]),e._v(" "),a("p",[e._v("Confirm deposit is completed.")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/deposit/confirm")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DepositMsg2 {\n    shared_key_id: Uuid,\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Uuid\n")])])]),a("h2",{attrs:{id:"transfer-endpoints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-endpoints"}},[e._v("#")]),e._v(" Transfer Endpoints")]),e._v(" "),a("p",[e._v("There are three specific transfer endpoints to initiate (sender), recieve and finalise the statecoin transfer protocol.")]),e._v(" "),a("h4",{attrs:{id:"transfer-sender"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-sender"}},[e._v("#")]),e._v(" Transfer sender")]),e._v(" "),a("p",[e._v("Sender calls with statechain signature to get the blinding factor and proof key.")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/transfer/sender")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("TransferMsg1 {\n    shared_key_id: Uuid,\n    statechain_sig: StateChainSig,\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("TransferMsg2 {\n    x1: FESer,\n    proof_key: ecies::PublicKey,\n}\n")])])]),a("h4",{attrs:{id:"transfer-receiver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-receiver"}},[e._v("#")]),e._v(" Transfer receiver")]),e._v(" "),a("p",[e._v("Receiver calls with signed statechain, key share update and backup transaction.")]),e._v(" "),a("p",[a("strong",[e._v("request:")]),e._v(" https://fakeapi.mercurywallet.io/transfer/receiver")]),e._v(" "),a("p",[a("em",[e._v("data")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("TransferMsg4 {\n    shared_key_id: Uuid,\n    statechain_id: Uuid,\n    t2: FE, // t2 = t1*o2_inv = o1*x1*o2_inv\n    statechain_sig: StateChainSig,\n    o2_pub: GE,\n    tx_backup_hex: String,\n    batch_data: Option<BatchData>,\n}\n")])])]),a("p",[a("em",[e._v("response")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("TransferMsg5 {\n    new_shared_key_id: Uuid,\n    s2_pub: GE,\n    theta: FE,\n}\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);